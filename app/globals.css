*:where(
    :not(html, iframe, canvas, img, svg, video, audio):not(svg *, symbol *)
  ) {
  all: unset;
  display: revert;
}

html {
  scroll-behavior: smooth;
  scroll-padding: 50px 0 0 50px;
  min-height: 100vh;
  color: rgb(var(--blackSwitch));
  background-color: rgb(var(--whiteSwitch));
}

*,
*::before,
*::after {
  box-sizing: border-box;
  transition: background-color 400ms;
}

/* Reapply the pointer cursor for anchor tags */
a,
button {
  cursor: revert;
}

/* Remove list styles (bullets/numbers) */
ol,
ul,
menu {
  list-style: none;
}

/* For images to not be able to exceed their container */
img {
  max-inline-size: 100%;
  max-block-size: 100%;
}

svg {
  max-inline-size: 100%;
  max-block-size: 100%;
}

/* removes spacing between cells in tables */
table {
  border-collapse: collapse;
}

/* Safari - solving issue when using user-select:none on the <body> text input doesn't working */
input,
textarea {
  -webkit-user-select: auto;
}

/* revert the 'white-space' property for textarea elements on Safari */
textarea {
  white-space: revert;
}

/* minimum style to allow to style meter element */
meter {
  -webkit-appearance: revert;
  appearance: revert;
}

/* preformatted text - use only for this feature */
:where(pre) {
  all: revert;
}

/* reset default text opacity of input placeholder */
::placeholder {
  color: unset;
}

/* remove default dot (â€¢) sign */
::marker {
  content: initial;
}

/* fix the feature of 'hidden' attribute.
 display:revert; revert to element instead of attribute */
:where([hidden]) {
  display: none;
}

/* revert for bug in Chromium browsers
 - fix for the content editable attribute will work properly.
 - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element*/
:where([contenteditable]:not([contenteditable="false"])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  overflow-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

/* apply back the draggable feature - exist only in Chromium and Safari */
:where([draggable="true"]) {
  -webkit-user-drag: element;
}

/* Revert Modal native behavior */
:where(dialog:modal) {
  all: revert;
}


:root {
  color: rgb(var(--blackSwitch));
  --fs-xl: clamp(3rem, 4vw + 1rem, 10rem);
  --fs-600: 1.5rem;
  --fs-500: 1.25rem;
  --fs-400: 1rem;
  font-family: "Roboto", sans-serif;
  font-size: var(--fs-400);
}

@media only screen and (min-width: 40em) {
    /* desktop sizing */
  :root {
    --fs-600: 2rem;
    --fs-500: 1.5rem;
    --fs-400: 1.125rem;
  }
}

body::-webkit-scrollbar {
  width: 0.25rem;
}
body::-webkit-scrollbar-track {
  background-color: #1e1e24;
}
body::-webkit-scrollbar-thumb {
  background-color: #6649b8;
}


/************************************************REUSABLES******************************************************/

h1 {
  font-size: var(--fs-600);
  color: rgb(var(--mainColor));
  font-weight: bold;
  text-align: center;
  margin: 1rem 0;
  text-transform: uppercase;
  position: relative;
}

h1::before {
  content: "";
  position: absolute;
  top: -1rem;
  left: 50%;
  height: 0.5rem;
  width: 4rem;
  translate: -50%;
  background-repeat: repeat-x;
  background-position: top center;
  -webkit-mask-image: url(../public/divider.png);
  mask-image: url(../public/divider.png);
  background-color: rgb(var(--mainColor));
}

h2 {
  font-size: var(--fs-500);
}

.makeBold {
  font-weight: bold;
}

.makeHighlighted {
  color: rgb(var(--mainColor));
}

.makeUppercase {
  text-transform: uppercase;
}

.makeCapitalize {
  text-transform: capitalize;
}

button {
  padding: 0.5rem 1rem;
  margin: 1rem 0;
  background-color: rgb(var(--mainColor));
  border-radius: 0.2rem;
  color: rgb(var(--blackSwitch));
  cursor: pointer;
  transition: filter 600ms;
  text-align: center;
}


button:hover {
  filter: brightness(90%);
}

*, *::before, *::after {
  /* border: 1px solid red !important; */
}

#player{
  background-color: green;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 999;
}